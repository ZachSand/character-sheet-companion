import { BASE_EVENTS } from "../baseEvents";
import { EVENT_TYPES } from "../eventTypes";

const IOS_EVENT = "ios:";

export class IosSocketEvents implements SocketEvents {
  private static _instance: IosSocketEvents;
  IOS_EVENTS = {
    SETUP: {
      JOIN_ROOM: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.SETUP.JOIN_ROOM,
      WORLD_USERS: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.SETUP.WORLD_USERS,
      WORLD_DATA: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.SETUP.WORLD_DATA,
      WORLD_USER_AUTH:
        EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.SETUP.WORLD_USER_AUTH,
      SETUP_COMPLETE: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.SETUP.SETUP_COMPLETE,
    },
    ACTOR: {
      ATTRIBUTES: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.ATTRIBUTES,
      ABILITIES: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.ABILITIES,
      SKILLS: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.SKILLS,
      SPELL_SLOTS: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.SPELL_SLOTS,
      INVENTORY: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.INVENTORY,
      DETAILS: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.DETAILS,
      CURRENCY: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.CURRENCY,
      SPELLS: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.SPELLS,
      BASE_DATA: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.BASE_DATA,
      CLASSES: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.CLASSES,
      TRAITS: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR.TRAITS,
    },
    ACTOR_CHANGE: {
      HEALTH_CHANGE:
        EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR_CHANGE.HEALTH_CHANGE,
      LONG_REST: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR_CHANGE.LONG_REST,
      SHORT_REST: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ACTOR_CHANGE.SHORT_REST,
    },
    ROLL: {
      ABILITY: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ROLL.ABILITY,
      SKILL: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ROLL.SKILL,
      ITEM_ATTACK: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ROLL.ITEM_ATTACK,
      ITEM_DAMAGE: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ROLL.ITEM_DAMAGE,
      ITEM_CONSUME: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ROLL.ITEM_CONSUME,
      ITEM_TOOL: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ROLL.ITEM_TOOL,
      INITIATIVE: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ROLL.INITIATIVE,
      DEATH_SAVE: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ROLL.DEATH_SAVE,
      HIT_DIE: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.ROLL.HIT_DIE,
    },
    DISPLAY: {
      DISPLAY_ITEM: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.DISPLAY.ITEM,
      CHAT_DATA: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.DISPLAY.CHAT_DATA,
      CHAT_MESSAGE: EVENT_TYPES.SOCKET.IOS + BASE_EVENTS.DISPLAY.CHAT_MESSAGE,
    },
  };

  private constructor() {
    //No Op -> Singleton
  }

  public static get Instance(): IosSocketEvents {
    return this._instance || (this._instance = new this());
  }

  getEvents(): string[] {
    return Object.values(this.IOS_EVENTS.ACTOR).concat(
      Object.values(this.IOS_EVENTS.DISPLAY),
      Object.values(this.IOS_EVENTS.SETUP),
      Object.values(this.IOS_EVENTS.ROLL),
      Object.values(this.IOS_EVENTS.ACTOR_CHANGE)
    );
  }

  getFromBaseEvent(event: string): string {
    return IOS_EVENT + event;
  }
}
